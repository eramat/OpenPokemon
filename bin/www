#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('OpenPokemon:server');
var http = require('http');
var core = require('../core');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);


/**
 * Listen on provided port, on all network interfaces.
 */
var pokemon_cards=[];
var energy_cards=[];
var filesXY=fs.readdirSync('../data/XY/XY');
var filesXYOriginesAntique=fs.readdirSync('../data/XY/XY - Origines Antiques');
var filesXYImpactdesDestins=fs.readdirSync('../data/XY/XY - Impact des Destins');
var filesXYGeneration=fs.readdirSync('../data/XY/Generations');
var filesXYPoingFurieux=fs.readdirSync('../data/XY/Poings Furieux');

filesXY.forEach(function(file){
    if(path.extname(file)==='.json') {
        pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/XY/' + file, 'utf8')));
    }

});
filesXYOriginesAntique.forEach(function(file){
    if(path.extname(file)==='.json') {
        pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/XY - Origines Antiques/' + file, 'utf8')));
    }

});
filesXYImpactdesDestins.forEach(function(file){
    if(path.extname(file)==='.json') {
        pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/XY - Impact des Destins/' + file, 'utf8')));
    }

});
filesXYGeneration.forEach(function(file){
    if(path.extname(file)==='.json') {
        pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/Generations/' + file, 'utf8')));
    }

});
filesXYPoingFurieux.forEach(function(file){
    if(path.extname(file)==='.json') {
        pokemon_cards.push(new core.Builder().createFromJSON(fs.readFileSync('../data/XY/Poings Furieux/' + file, 'utf8')));
    }

});
var deck= new core.Deck(pokemon_cards,energy_cards,[]);
var player= new core.Player(deck);
player.selectInitialHand();

io.sockets.on('connection', function (socket) {
    socket.on('message', function (message) {
        console.log(message);
        socket.message = message;
        socket.broadcast.emit('message', message);
    });
    socket.emit("bench",player.bench());
    socket.emit("hand",player.hand());
    socket.emit("ennemyhand",player.hand().length);
    socket.on("toBench",function(id) {
        if(player.bench().length < 5) {
            player.addBench(id);
            player.takeCardInHand(id);
            socket.emit("bench", player.bench());
            socket.emit("hand", player.hand());
        }

    });
    socket.on("toActive",function(id) {
        player.putBenchToActive(id);
        socket.emit("bench", player.bench());
        socket.emit("pokemonActive",player.activePokemon());
        socket.emit("life_point",player.activePokemon().life_point);
    });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}